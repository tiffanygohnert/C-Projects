bnode.h0000600003530400007650000000555312727147754012156 0ustar  cs235s3g5studentï»¿#ifndef  NODE_H
#define NODE_H
#include <cassert>
#include <iostream>

using namespace std;

//node class
template <class T>
class BinaryNode
{

public:
	//default constructor
	BinaryNode() : pRight(NULL), pLeft(NULL), pParent(NULL), data(0x00000000)/*, numItems(1)*/ {}

	//non-default constructor 
	BinaryNode(const T & t) : pRight(NULL), pLeft(NULL), pParent(NULL), data(t)/*, numItems(1)*/ {} /*throw (const char *)*/

	void addLeft(const T & t)
	{
		BinaryNode <T> * tempBNode = new BinaryNode <T>(t);
		this->pLeft = tempBNode;
		tempBNode->pParent = this;
		//numItems++;
	}

	void addLeft(BinaryNode <T> * bNode)
	{
		if (!bNode)
		{
			this->pLeft = NULL;
			return;
		}
		this->pLeft = bNode;
		bNode->pParent = this;
		//numItems++;
	}

	void addRight(const T & t)
	{
		BinaryNode <T> * tempBNode = new BinaryNode <T>(t);
		this->pRight = tempBNode;
		tempBNode->pParent = this;
		//numItems++;
	}

	void addRight(BinaryNode <T> * bNode)
	{
		if (!bNode)
		{
			this->pRight = NULL;
			return;
		}
		this->pRight = bNode;
		bNode->pParent = this;
		//numItems++;
	}

	int size() const
	{ 
		if (this == NULL)
			return 0;
		else
		{
			int count = 1;
			count += this->pLeft->size();
			count += this->pRight->size();
			return count;
		}
	}
  
	/*int countNodes(BinaryNode <T> * bNode)
	{
		unsigned count = 0;
		if (bNode->pLeft)
		{
			countNodes(bNode->pLeft);
			if (bNode->pRight)
				countNodes(bNode->pRight);
			count++;
		}
	}*/

  // member variables 
  BinaryNode <T> * pRight;
  BinaryNode <T> * pLeft;
  BinaryNode <T> * pParent;
  T data;
  //int numItems;
};

/*
deleteBinaryTree(): Takes a BinaryNode as a parameter and 
deletes all the children and itself. This is a recursive 
function.
*/
template <class T>
void deleteBinaryTree(BinaryNode <T> * &bNode)
{
	if (bNode->pLeft)
	{
		deleteBinaryTree(bNode->pLeft);
		if (bNode->pRight)
			deleteBinaryTree(bNode->pRight);
		delete bNode;
		bNode = NULL;
	}
}

/*
Insertion operator: Takes a constant BinaryNode * as a 
parameter and displays the tree under the passed parameter. 
This is a recursive function traversing the tree in infix 
order. A single space will be displayed after every element.
*/

template <class T>
ostream & operator << (ostream & out, BinaryNode <T> * rhs)
{
	// prints R, L, R, LL, LR, RL, RR... incorrect
	/*if (rhs != NULL)
	{
		out << rhs->data << " ";
		out << (rhs->pLeft);
		out << (rhs->pRight);
	}
	return out;*/
	
	// Postorder
	//if (rhs != NULL)
	//{
	//	out << (rhs->pLeft);
	//	//out << rhs->data << " ";
	//	out << (rhs->pRight);
	//	out << rhs->data << " ";
	//}
	//return out;

	// Inorder!! YAY!
	if (rhs != NULL)
	{
		out << (rhs->pLeft);
		out << rhs->data << " ";
		out << (rhs->pRight);
		//out << rhs->data << " ";
	}
	return out;
}

#endif
huffman.h0000600003530400007650000001310412727147755012503 0ustar  cs235s3g5student/***********************************************************************
 * Module:
 *    Week 08, Huffman
 *    Brother Helfrich, CS 235
 * Author:
 *    Br. Helfrich
 * Summary:
 *    This program will implement the huffman() function
 ************************************************************************/

#ifndef HUFFMAN_H
#define HUFFMAN_H
#include <string>      // for STRING

void huffman(const std::string& input);


#include <cassert>
#include <iostream>
#include <fstream>
using namespace std;

//stack class
template <class T>
class Stack
{

  public:

   //default constructor
  Stack():  Size(0),Capacity(0), vector(0x00000000){}

   //destructor
   ~Stack(){};
   // { if (Size) delete [] vector; }

   //non-default constructor Needed for test 1
   Stack(int capacity) throw (const char *);

   //copy constructor
   Stack(const Stack& rhs)throw (const char *);


   //operator=
   // assignment operator
   Stack & operator = (const Stack & rhs)throw (const char *)
   {
           try
           {  Stack temp = rhs;
              Capacity = temp.Capacity;
              vector = temp.vector;
              Size = temp.Size;
              return *this;
           }
           catch (std::bad_alloc)
           {
              throw "ERROR: Unable to allocate a new buffer for Stack";
           }

   }

   //empty()
   bool empty()const {return Size ==0;  }
   //clear()
   void clear(){Size =0; }

   //size()
   int size()const{return Size; }
   //capacity()
   int capacity()const {   return Capacity;}
   
   int clear() const {Size =0; return Size; }; 

   //push_back
   void push(const T & t) throw (const char *);
   void pop() throw (const char *);
   T top() throw (const char *); 
   

   // return an iterator to the beginning of the list
   //StackIterator <T> begin() { return StackIterator<T>(vector); }

   // return an iterator to the end of the list
   // StackIterator <T> end() { return StackIterator<T>(vector + Size);};



   // operators[]
   T & operator [](int& index) const throw(const char *)
   {
      if (Capacity < 0 || Capacity < Size)
         throw "ERROR: Invalid index\n";
      return vector[index];
   }

   T & operator [](int& index) throw(const char *)
   {
      if (Capacity < 0 || Capacity < Size)
         throw "ERROR: Invalid index\n";
      return vector[index];
   }




  private:

   int Size;
   T * vector;
   int Capacity;
  


};

/**********************************************
 * Stack : NON-DEFAULT CONSTRUCTOR
 * Preallocate the Stack to "capacity"
 **********************************************/
template <class T>
Stack <T> :: Stack(int capacity) throw (const char *)
{
   assert(capacity >= 0);

   // do nothing if there is nothing to do
   if (capacity == 0)
   {
      this->Capacity = this->Size = 0;
      this->vector = 0x00000000;
      return;
   }

   // attempt to allocate
            try
            {
               vector = new T[capacity];

            }
            catch (std::bad_alloc)
            {
               //problem for test 1
               throw "ERROR: Unable to allocate buffer";


            }


            // copy over the stuff
            this->Capacity = capacity;
            this->Size = 0;

}

/*******************************************
 * Stack:: COPY CONSTRUCTOR
 *******************************************/
template <class T>
Stack <T> :: Stack(const Stack <T> & rhs) throw (const char *)
{
   assert(rhs.Capacity >= 0);

   // do nothing if there is nothing to do
   if (rhs.Capacity == 0)
   {
      Capacity = Size = 0;
      vector = 0x00000000;
      return;
   }

   // attempt to allocate
          try
          {
             vector = new T[rhs.Capacity];
          }
          catch (std::bad_alloc)
          {
             throw "ERROR: Unable to allocate buffer";
          }

          // copy over the stuff
          assert(rhs.Size >= 0 && rhs.Size <= rhs.Capacity);
          Capacity = rhs.Capacity;
          Size = rhs.Size;
          for (int i = 0; i < Size; i++)
             vector[i] = rhs.vector[i];
}

/***************************************************
 * Stack :: push
 * Insert an item on the end of the Stack
 **************************************************/
template <class T>
void Stack <T> :: push(const T & t) throw (const char *)
{
// try
//{
//if (Capacity==0 || Capacity ==Size)
//{
//if (Capacity==0)
//{
//Capacity=1;
//vector = new T[Capacity]; }
//else
//Capacity *=2;
//
//}
//}
//catch (std::bad_alloc)
//{
//throw "ERROR: Unable to allocate buffer\
//";
//}
//vector[Size++] = t;
	if (Size == 0)
	{
		delete[] vector;
		Capacity = 1;
		vector = new T[Capacity];
	}
	if (Capacity == Size)
	{
		Capacity *= 2;
		T * tempArray = new T[Capacity];
		for (int i = 0; i < Size; i++)
			tempArray[i] = vector[i];
		delete[] vector;
		vector = tempArray;
	}
	// add an item to the end
	try
	{
		vector[Size++] = t;
	}
	catch (std::bad_alloc)
	{
		throw "ERROR: Unable to allocate a new buffer for Vector";
	}
}

//pop()
/***************************************************
 * Stack :: pop
 * Removes an item from the end of the stack
 **************************************************/
template <class T>
 void Stack <T> :: pop() throw (const char *)
{
	if (empty())
		throw "ERROR: Unable to pop from an empty Stack";
	vector[Size--]; 
}


//top()
/***************************************************
 * Stack :: top
 * Returns the item currently at the end of the stack
 **************************************************/
template <class T>
T Stack <T> :: top() throw (const char *)
{
	if (empty())
		throw "ERROR: Unable to reference the element from an empty Stack";
	return vector[Size - 1];   
}

#endif // HUFFMAN_h
pair.h0000600003530400007650000000504412727147756012017 0ustar  cs235s3g5student/***********************************************************************
 * Module:
 *    Week 08, Pair
 *    Brother Helfrich, CS 235
 * Author:
 *    Br. Helfrich
 * Summary:
 *    This program will implement a pair: two values
 ************************************************************************/

#ifndef PAIR_H
#define PAIR_H

#include <iostream>  // for ISTREAM and OSTREAM

/**********************************************
 * PAIR
 * This class couples together a pair of values, which may be of
 * different types (T1 and T2). The individual values can be
 * accessed through its public members first and second.
 *
 * Additionally, when compairing two pairs, only T1 is compared. This
 * is a key in a name-value pair.
 ***********************************************/
template <class T1, class T2>
class Pair
{
public:
   // constructors
  Pair() : first(), second() {}
   Pair(const T1 & first, const T2 & second) : first(first), second(second) {}
   Pair(const Pair <T1, T2> & rhs) : first(rhs.first), second(rhs.second) {}

   // copy the values
   Pair <T1, T2> & operator = (const Pair <T1, T2> & rhs)
   {
      first  = rhs.first;
      second = rhs.second;
      return *this;
   }

   // constant fetchers
   const T1 & getFirst()  const { return first;  }
   const T2 & getSecond() const { return second; }
   
   // compare Pairs.  Only first will be compared!
   bool operator >  (const Pair & rhs) const { return first >  rhs.first; }
   bool operator >= (const Pair & rhs) const { return first >= rhs.first; }
   bool operator <  (const Pair & rhs) const { return first <  rhs.first; }
   bool operator <= (const Pair & rhs) const { return first <= rhs.first; }
   bool operator == (const Pair & rhs) const { return first == rhs.first; }
   bool operator != (const Pair & rhs) const { return first != rhs.first; }
   
   // these are public.  We cannot validate!
   T1 first;
   T2 second;
};

/*****************************************************
 * PAIR INSERTION
 * Display a pair for debug purposes
 ****************************************************/
template <class T1, class T2>
inline std::ostream & operator << (std::ostream & out, const Pair <T1, T2> & rhs)
{
   out << '(' << rhs.first << ", " << rhs.second << ')';
   return out;
}

/*****************************************************
 * PAIR EXTRACTION
 * input a pair
 ****************************************************/
template <class T1, class T2>
inline std::istream & operator >> (std::istream & in, Pair <T1, T2> & rhs)
{
   in >> rhs.first >> rhs.second;
   return in;
}

#endif // PAIR_H
huffman.cpp0000600003530400007650000001067112727465233013036 0ustar  cs235s3g5student/***********************************************************************
 * Module:
 *    Week 08, Huffman
 *    Brother Helfrich, CS 235
 * Author:
 *    John Vehikite, Tiffany Gohnert
 *    
 * Summary: This program will implement the huffman() function
 ************************************************************************/

#include "huffman.h"       // for HUFFMAN() prototype

#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <sstream>
#include <cstdlib>
#include <cassert>
 
using namespace std;



template<class T> 
class Q {
   int array_size, heap_size;
   T** A; // pointer for the array

public:
   Q(int s);
   ~Q();
   
   T* extractMin();
   bool insert(T*);

private:
   int left(int i);
   int right(int i);
   int parent(int i);
   void decreaseKey(int, T*);
   
};

template<class T> 
Q<T>::Q(int s) {
   array_size = s;
   heap_size = -1;
   A = new T*[s];
}

template<class T> 
Q<T>::~Q() {
   delete A;
}


template<class T> 
int Q<T>::left(int i) {
   return 2 * (i + 1) - 1;
}

template<class T> 
int Q<T>::right(int i) {
   return 2 * (i + 1);
}

template<class T> 
int Q<T>::parent(int i) {
   return max((i + 1) / 2 - 1, 0);
}

template<class T> 
T* Q<T>::extractMin() {
 
      T* min = A[0];
      A[0] = A[heap_size];
      heap_size--;
    //  minHeapify(0);
      return min;
   
}


template<class T> 
bool Q<T>::insert(T* key) {
   
      heap_size++;
      decreaseKey(heap_size, key);
      return true;
   }

template<class T> 
void Q<T>::decreaseKey(int i, T* key) {
   A[i] = key;
   while ((i > 0) && ((*(A[parent(i)])) > (*(A[i])))) {
      T* t = A[i];
      A[i] = A[parent(i)];
      A[parent(i)] = t;
      i = parent(i);
   }
}



class Node {
public:
   string name;
   int f;
   Node *left, *right;
   string code;

   Node() {
      name = "";
      code = "";
      f = 100;
      left = right = 0;
   }

   Node(int ff, string n = "") {
      name = n;
      f = ff;
      left = right = 0;
      code = "";
   }

   ~Node() {
      delete left;
      delete right;
   }

   bool operator<(Node &param) {
      return f < param.f;
   }

   bool operator>(Node &param) {
      return f > param.f;
   }

   bool operator==(Node &param) {
      return f == param.f;
   }

   static void display(Node*, bool);
   static void encode(Node*);

   friend ostream& operator <<(ostream&, Node&);
};

void Node::display(Node* node, bool leavesOnly = 1) {
   if (node == 0) {
      return;
   }
   display(node->left, leavesOnly);
   if (leavesOnly) {
      if (node->left == 0 && node->right == 0) {
         cout << *node << endl /*", "*/;
      }
   } else {
      cout << *node << ", ";
   }
   display(node->right, leavesOnly);
}

void Node::encode(Node* node) {
   if (node == 0) {
      return;
   }
   if (node->left != 0) {
      node->left->code = node->code + "0";
   }
   if (node->right != 0) {
      node->right->code = node->code + "1";
   }
   encode(node->left);
   encode(node->right);
}

ostream& operator <<(ostream &out, Node &node) {
   out << node.name   << " = " << node.code;
   return out;
}

void HuffmanCode(float *freqs, string* names, int length) {
   Q<Node> *q = new Q<Node > (length);
   for (int i = 0; i < length; i++) {
      q->insert(new Node(freqs[i], names[i]));
   }

   for (int i = 0; i < length - 1; i++) {
      Node *x = q->extractMin();
      Node *y = q->extractMin();
      Node *z = new Node(x->f + y->f, x->name + y->name);
      z->left = x;
      z->right = y;
      q->insert(z);
   }
   Node *root = q->extractMin();
  
   //cout << "\nHuffman Code:\n";
   Node::encode(root);
   Node::display(root);
}
 

/*******************************************
 * HUFFMAN
 * Driver program to exercise the huffman generation code
 *******************************************/
void huffman(const std::string& input)
{

string line;

  string str[100];
size_t size = 0;
float frequency[100];
size_t sizef = 0;
int count = 0;
	

   ifstream filein (input.c_str());//file to open
   
   
    
   //open file and get frequency
   if (filein.is_open())
   {
      while ( getline (filein,line) )
      {
		  count++;
         string letter;
         float quency;
         stringstream ss;
         ss.str(line);
         ss >> letter >> quency;
        //cout << frequency << endl;
		// Add characters:
str[size++] = letter;
frequency[sizef++] = quency;
		 
		 //insert frequency into an array using vector class? 
		 
		  
	
		 
		 
      }
      filein.close();
   }

    HuffmanCode(frequency, str, count);
  
}
week08.cpp0000600003530400007650000002245012727147756012522 0ustar  cs235s3g5student/***********************************************************************
* Program:
*    Week 08, Binary Trees 
*    Brother Helfrich, CS 235
* Author:
*    Br. Helfrich
* Summary: 
*    This is a driver program to exercise the BinaryNode class.  When you
*    submit your program, this should not be changed in any way.  That being
*    said, you may need to modify this once or twice to get it to work.
************************************************************************/

#include <iostream>    // for CIN and COUT
#include <string>      // for STRING
#include <cassert>     // for ASSERT
#include "bnode.h"     // your BinaryNode class should be in bnode.h
#include "huffman.h"   // for huffman()
using namespace std;


// prototypes for our four test functions
void testSimple();
void testAdd();
void testDisplay();
void testMerge();

// To get your program to compile, you might need to comment out a few
// of these. The idea is to help you avoid too many compile errors at once.
// I suggest first commenting out all of these tests, then try to use only
// TEST1.  Then, when TEST1 works, try TEST2 and so on.
#define TEST1   // for testSimple()
#define TEST2   // for testAdd()
#define TEST3   // for testDisplay()
#define TEST4   // for testMerge()

/**********************************************************************
 * MAIN
 * This is just a simple menu to launch a collection of tests
 ***********************************************************************/
int main()
{
   // menu
   cout << "Select the test you want to run:\n";
   cout << "\t1. Just create and destroy a BinaryNode\n";
   cout << "\t2. The above plus add a few nodes to create a Binary Tree\n";
   cout << "\t3. The above plus display the contents of a Binary Tree\n";
   cout << "\t4. The above plus merge Binary Trees\n";
   cout << "\ta. To generate Huffman codes\n";

   // select
   char choice;
   cout << "> ";
   cin  >> choice;
   switch (choice)
   {
      case 'a':
      {
         // get the filename
         string fileName;
         cout << "Enter the filename containing the value frequencies.\n";
         cout << "Enter \"quit\" when done.\n";

         cout << "> ";
         cin  >> fileName;

         while (fileName != "quit")
         {
            huffman(fileName);
            cout << "> ";
            cin  >> fileName;
         }
         break;
      }
      case '1':
         testSimple();
         cout << "Test 1 complete\n";
         break;
      case '2':
         testAdd();
         cout << "Test 2 complete\n";
         break;
      case '3':
         testDisplay();
         cout << "Test 3 complete\n";
         break;
      case '4':
         testMerge();
         cout << "Test 4 complete\n";
         break;
      default:
         cout << "Unrecognized command, exiting...\n";
   }

   return 0;
}

/*******************************************
 * TEST SIMPLE
 * Very simple test for a BinaryNode: create and destroy
 ******************************************/
void testSimple()
{
#ifdef TEST1
   try
   {
      // Test1: a bool Stack with defeault constructor
      cout << "Create a bool BinaryNode using the default constructor\n";
      BinaryNode <bool> tree;
      cout << "\tSize:    " << tree.size() << endl;

      // Test2: double Stack with non-default constructor
      cout << "Create a double BinaryNode using the non-default constructor\n";
      BinaryNode <double> *pTree = new BinaryNode <double>(3.14159);
      cout << "\tSize:    " << pTree->size() << endl;
      delete pTree;
   }
   catch (const char * error)
   {
      cout << error << endl;
   }
#endif //TEST1
}

/*******************************************
 * TEST ADD
 * Add a few nodes together to create a tree, then
 * destroy it when done
 *****************************************/
void testAdd()
{
#ifdef TEST2
   try
   {
      // create
      BinaryNode <int> * pTree = new BinaryNode <int> (1);

      // add 2 to the left and 6 to the right
      pTree->addLeft(2);
      pTree->addRight(3);

      // add 1 and 3 off the left node
      pTree->pLeft->addLeft(4);
      pTree->pLeft->addRight(5);

      // add 5 and 7 to the right node
      pTree->pRight->addLeft(6);
      pTree->pRight->addRight(7);

      // now display the results:
      cout << "The elements in the binary tree:\n";
      cout << "\tRoot......... " << pTree->data                 << endl;
      cout << "\tLeft......... " << pTree->pLeft->data          << endl;
      cout << "\tRight........ " << pTree->pRight->data         << endl;
      cout << "\tLeft-Left.... " << pTree->pLeft->pLeft->data   << endl;
      cout << "\tLeft-Right... " << pTree->pLeft->pRight->data  << endl;
      cout << "\tRight-Left... " << pTree->pRight->pLeft->data  << endl;
      cout << "\tRight-Right.. " << pTree->pRight->pRight->data << endl;
      cout << "\tSize: "         << pTree->size()               << endl;

      // double-check the parents
      assert(pTree->pLeft->pParent  ==  pTree);
      assert(pTree->pRight->pParent ==  pTree);
      assert(pTree->pLeft ->pLeft ->pParent  ==  pTree->pLeft);
      assert(pTree->pLeft ->pRight->pParent  ==  pTree->pLeft);
      assert(pTree->pRight->pLeft ->pParent  ==  pTree->pRight);
      assert(pTree->pRight->pRight->pParent  ==  pTree->pRight);
      assert(pTree->pLeft ->pLeft ->pParent->pParent  ==  pTree);
      assert(pTree->pLeft ->pRight->pParent->pParent  ==  pTree);
      assert(pTree->pRight->pLeft ->pParent->pParent  ==  pTree);
      assert(pTree->pRight->pRight->pParent->pParent  ==  pTree);
      cout << "All the parent nodes are correctly set\n";
      
      // move some nodes around
      BinaryNode <int> * pSix   = pTree->pRight->pLeft;
      BinaryNode <int> * pSeven = pTree->pRight->pRight;
      pTree->pRight->addRight(pSix);
      pTree->pRight->addLeft(pSeven);
      assert(pTree->pRight->pRight->data == 6);
      assert(pTree->pRight->pLeft->data == 7);
      cout << "Was able to move the '6' and '7' nodes\n";
   
      // delete the left half of the tree
      BinaryNode <int> * pTemp = pTree->pLeft;
      pTree->addLeft((BinaryNode <int> *)NULL);
      assert(pTree->pLeft == NULL);
      deleteBinaryTree(pTemp);
      cout << "Size after deleting half the nodes: " << pTree->size() << endl;
   
      // finally, delete everything else
      deleteBinaryTree(pTree);
      cout << "Was able to delete the rest of the binary tree\n";
   }
   catch (const char * error)
   {
      cout << error << endl;
   }
#endif // TEST2   
}

/*******************************************
 * TEST Display
 * We will build a binary tree and display the
 * results on the screen
 ******************************************/
void testDisplay()
{
#ifdef TEST3
   try
   {
      // create
      BinaryNode <string> *pTree = NULL;

      // prompt for seven words
      string word;
      cout << "Enter seven words\n";
      cout << "\tRoot node:         ";
      cin  >> word;
      pTree = new BinaryNode <string> (word);

      cout << "\tLeft child:        ";
      cin  >> word;
      pTree->addLeft(new BinaryNode <string> (word));

      cout << "\tRight child:       ";
      cin  >> word;
      pTree->addRight(new BinaryNode <string> (word));
      
      cout << "\tLeft-Left child:   ";
      cin  >> word;
      pTree->pLeft->addLeft(new BinaryNode <string> (word));
      
      cout << "\tLeft-Right child:  ";
      cin  >> word;
      pTree->pLeft->addRight(new BinaryNode <string> (word));
      
      cout << "\tRight-Left child:  ";
      cin  >> word;
      pTree->pRight->addLeft(new BinaryNode <string> (word));
      
      cout << "\tRight-Right child: ";
      cin  >> word;
      pTree->pRight->addRight(new BinaryNode <string> (word));

      // when we are adding nothing, we should just return
      pTree->pLeft->pLeft->addLeft(NULL);
      pTree->pRight->pRight->addRight(NULL);
   
      // display the results
      cout << "Completed tree: { " << pTree << "}\n";

      // delete the tree
      deleteBinaryTree(pTree);
   }
   catch (const char * error)
   {
      cout << error << endl;
   }
#endif // TEST3
}

/*******************************************
 * TEST MERGE
 * Create three binary trees and merge them
 *******************************************/
void testMerge()
{
#ifdef TEST4
   try
   {
      // create the middle tree
      BinaryNode <char> * pMiddle = new BinaryNode <char> ('m');
      pMiddle->addLeft ('l');
      pMiddle->addRight('n');
      cout << "Middle tree: { " << pMiddle << "}"
           << " size = " << pMiddle->size() << endl;

      // create lower tree
      BinaryNode <char> * pLower  = new BinaryNode <char> ('b');
      pLower->addLeft  ('a');
      pLower->addRight ('c');
      cout << "Lower tree: { " << pLower << "}"
           << " size = " << pLower->size() << endl;
      

      // create upper tree
      BinaryNode <char> * pUpper  = new BinaryNode <char> ('y');
      pUpper->addLeft  ('x');
      pUpper->addRight ('z');
      cout << "Upper tree: { " << pUpper << "}"
           << " size = " << pUpper->size() << endl;
      
   
      // add Lower to the left of Middle, and Upper to the right of Middle
      pMiddle->pLeft->addLeft(pLower);
      pMiddle->pRight->addRight(pUpper);
      cout << "Merged tree: { " << pMiddle << "}"
           << " size = " << pMiddle->size() << endl;
      
      // delete the tree
      deleteBinaryTree(pMiddle);
   }
   catch (const char * error)
   {
      cout << error << endl;
   }
#endif // TEST4
}
makefile0000600003530400007650000000205412727465422012402 0ustar  cs235s3g5student###############################################################
# Program:
#     Week 08, Binary Tree
#     Brother JonesL, CS235
# Author:
#     Tiffany Gohnert John Vehikite
# Summary:
#     Create a class similar to a Binary Tree.
# Time:
#     15+ hours
# Most difficult part:
#     The second portion of the assignment - Huffman Codes -
#     was extremely difficult.
###############################################################

##############################################################
# The main rule
##############################################################
a.out: week08.o huffman.o 
	g++ -o a.out week08.o huffman.o -g
	tar -cf week08.tar *.h *.cpp makefile

##############################################################
# The individual components
#      week08.o     : the driver program
#      huffman.o      : the logic for the huffman code program
##############################################################
week08.o: bnode.h huffman.h week08.cpp
	g++ -c week08.cpp -g

huffman.o: bnode.h huffman.h huffman.cpp
	g++ -c huffman.cpp -g

