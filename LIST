fibonacci.h0000600003530400007650000000104612725170331012756 0ustar  cs235s3g5student/***********************************************************************
 * Header:
 *    FIBONACCI
 * Summary:
 *    This will contain just the prototype for fibonacci(). You may
 *    want to put other class definitions here as well.
 * Author
 *    Tiffany Gohnert, John Vehikite
 ************************************************************************/

#ifndef FIBONACCI_H
#define FIBONACCI_H
#include <iostream>
using namespace std;




// the interactive fibonacci program
void fibonacci();
int Number(int number);




#endif // FIBONACCI_H

list.h0000600003530400007650000003200412725167675012033 0ustar  cs235s3g5student/***********************************************************************
* Header:
* LIST
* Summary:
* This will contain the class definition of:
* List : A class that represents a List
* ListIterator : An interator through List
* Author
* Br. Helfrich
************************************************************************/

#ifndef LIST_H
#define LIST_H
#include <cassert> // for ASSERT
#include <iostream> // for NULL

/*************************************************
* NODE
* the node class. Since we do not validate any
* of the setters, there is no point in making them
* private. This is the case because only the
* List class can make validation decisions
*************************************************/

template <class T>
class Node
{
public:

	// default constructor: set pointers to NULL. This is the only reason
	// why Node is not a structure
	Node() : pNext(NULL), pPrev(NULL), data() {}

	// non-default. Initialize data as we create the node
	Node(const T & data) : pNext(NULL), pPrev(NULL), data(data) {}

	T data; // user data

	Node <T> * pNext; // pointer to next node

	Node <T> * pPrev; // pointer to previous node

};

// forward declaration for ListIterator. This will work for
// both the forward iterator and the reverse iterator
template <class T>
class ListIterator;

// we need a constant iterator also even though it is so redundant
template <class T>
class ListConstIterator;

/**************************************************
* LIST
* Generic linked list class. Supports the following:
* = : copy one list onto another
* ERASE : empty the list
* EMPTY : is the list currently empty?
* PUSH_BACK : add an item to the tail
* PUSH_FRONT : add an item to the head of the list
* BACK : returns the last element in the list
* FRONT : returns the first element in the list
* INSERT : add an item to a location somewhere in the middle
* iterators : forward and backward iterators, const and non-const
**************************************************/

template <class T>
class List
{
public:

	// constructors, destructores, and assignment operator
	List() : numItems(0), pHead(NULL), pTail(NULL) {}

	List(const List <T> & rhs) throw (const char *) :

	pHead(NULL), pTail(NULL), numItems(0) { *this = rhs; }

	~List() { clear(); }

	List <T> & operator = (const List <T> & rhs) throw (const char *);

	// standard container interfaces
	void clear();

	bool empty() const { return (pHead == NULL); }

	int size() const { return numItems; }

	// list-specific interfaces
	void push_back (const T & data) throw (const char *);
	
	void push_front(const T & data) throw (const char *);
	
	T & back() throw (const char *);
	
	T & front() const throw (const char *);

	ListIterator <T> insert(ListIterator <T> & it, const T & data) throw (const char *);

	ListIterator <T> remove(ListIterator <T> & it) throw (const char *);


	// iterator stuff

	ListIterator <T> begin() { return ListIterator <T> (pHead); }

	ListIterator <T> end() { return ListIterator <T> (NULL); }

	ListIterator <T> rbegin() { return ListIterator <T> (pTail); }

	ListIterator <T> rend() { return ListIterator <T> (NULL); }

	// constant iterator stuff

	ListConstIterator<T>cbegin() const { return ListConstIterator<T>(pHead); }

	ListConstIterator<T>cend() const { return ListConstIterator<T>(NULL); }

	ListConstIterator<T>crbegin() const { return ListConstIterator<T>(pTail); }

	ListConstIterator<T>crend() const { return ListConstIterator<T>(NULL); }

private:

	int numItems;
	Node <T> * pHead; // pointer to the beginning of the list
	Node <T> * pTail; // pointer to the ending of the list

};

/*************************************************

* LIST ITERATOR

* Iterate through a List, non-constant version

************************************************/

template <class T>
class ListIterator
{

public:

	// default constructor: not pointing to anything
	ListIterator() : p(NULL) {}

	// non-default constrictor taking a pointer as a parameter
	ListIterator(Node <T> * p) : p(p) {}

	// copy constructor
	ListIterator(const ListIterator <T> & rhs) : p(rhs.p) {}

	// assignment operator
	ListIterator <T> & operator = (const ListIterator <T> & rhs)
	{
		p = rhs.p;
		return *this;
	}

	// dereference operator, fetch a node
	T & operator * () throw (const char *)
	{
		if (p)
			return p->data;
		else
			throw "ERROR: Trying to dereference a NULL pointer";
	}

	// equals operator: are the iterators the same?
	bool operator == (const ListIterator <T> & rhs) const
	{
		return rhs.p == this->p;
	}

	// not-equals operator: are the iterators different?
	bool operator != (const ListIterator <T> & rhs) const
	{
		return rhs.p != this->p;
	}

	// postfix increment
	ListIterator <T> operator ++ (int postfix)
	{
		ListIterator <T> old(*this);
		assert(p);
		p = p->pNext;
		return old;
	}

	// prefix increment
	ListIterator <T> & operator ++ ()
	{
		assert(p);
		p = p->pNext;
		return *this;
	}

	// postfix decrement
	ListIterator <T> operator -- (int postfix)
	{
		ListIterator <T> old(*this);
		assert(p);
		p = p->pPrev;
		return old;
	}

	// prefix decrement
	ListIterator <T> & operator -- ()
	{
		assert(p);
		p = p->pPrev;
		return *this;
	}

	// two friends who need to access p directly
	friend ListIterator <T> List <T> :: insert(ListIterator <T> & it, const T & data) throw (const char *);

	friend ListIterator <T> List <T> :: remove(ListIterator <T> & it) throw (const char *);

private:

	Node <T> * p;
};

/*************************************************
* LIST CONST ITERATOR
* Iterate through a List, the constant version
************************************************/

template <class T>
class ListConstIterator
{
public:

	// default constructor: not pointing to anything
	ListConstIterator() : p(NULL) {}

	// non-default constrictor taking a pointer as a parameter
	ListConstIterator(const Node <T> * p) : p(p) {}

	// copy constructor
	ListConstIterator(const ListConstIterator <T> & rhs) : p(rhs.p) {}

	// assignment operator
	ListConstIterator <T> & operator = (const ListConstIterator <T> & rhs)
	{
		p = rhs.p;
		return *this;
	}

	// dereference operator, fetch a node
	// this is the only real difference between ListConstIterator and the other
	T operator * () const { return p->data; }
	
	// equals operator: are the iterators the same?
	bool operator == (const ListConstIterator <T> & rhs) const
	{
		return rhs.p == this->p;
	}

	// not-equals operator: are the iterators different?
	bool operator != (const ListConstIterator <T> & rhs) const
	{
		return rhs.p != this->p;
	}

	// postfix increment
	ListConstIterator <T> operator ++ (int postfix)
	{
		ListConstIterator <T> old(*this);
		assert(p);
		p = p->pNext;
		return old;
	}

	// prefix increment
	ListConstIterator <T> & operator ++ ()
	{
		assert(p);
		p = p->pNext;
		return *this;
	}

	// postfix decrement
	ListConstIterator <T> operator -- (int postfix)
	{
		ListConstIterator <T> old(*this);
		assert(p);
		p = p->pPrev;
		return old;
	}

	// prefix decrement
	ListConstIterator <T> & operator -- ()
	{
		assert(p);
		p = p->pPrev;
		return *this;
	}

private:

	const Node <T> * p;
};

/**********************************************
* LIST :: assignment operator
* Copy one list onto another
* INPUT : a list to be copied
* OUTPUT :
* COST : O(n) with respect to the number of nodes
*********************************************/

template <class T>
List <T> & List <T> :: operator = (const List <T> & rhs) throw (const char *)
{
	// erase all the existing elements
	clear();

	// now allocate the new nodes
	for (Node <T> * p = rhs.pHead; p; p = p->pNext)
		push_back(p->data); // this could throw

	// return the new buffer
	return *this;
}

/**********************************************
* LIST :: CLEAR
* Remove all the items currently in the linked list
* INPUT :
* OUTPUT :
* COST : O(n) with respect to the number of nodes
*********************************************/

template <class T>
void List <T> :: clear()
{

	// loop through the entire list, removing everything
	Node <T> * pNext;
	for (Node <T> * p = pHead; p; p = pNext)
	{
		pNext = p->pNext;
		delete p;
	}

	pHead = pTail = NULL;
	numItems = 0;
}

/*********************************************
* LIST :: PUSH BACK
* add an item to the end of the list
* INPUT : data to be added to the list
* OUTPUT :
* COST : O(1)
*********************************************/

template <class T>
void List <T> :: push_back(const T & data) throw (const char *)
{

	try
	{

		// create the node
		Node <T> * pNew = new Node <T> (data);

		// point it to the old tail
		pNew->pPrev = pTail;

		// now point tail to the new guy
		if (pTail != NULL)
			pTail->pNext = pNew;
		else
			pHead = pNew; // there is no tail so there is no head!
	
		// finally, this is the new tail
		pTail = pNew;
		numItems++;
	}

	catch (...)
	{
		throw "ERROR: unable to allocate a new node for a list";
	}
}

/*********************************************
* LIST :: PUSH FRONT
* add an item to the head of the list
* INPUT : data to be added to the list
* OUTPUT :
* COST : O(1)
*********************************************/

template <class T>
void List <T> :: push_front(const T & data) throw (const char *)
{

	try
	{

	// create the node
	Node <T> * pNew = new Node <T> (data);

	// point it to the old head
	pNew->pNext = pHead;

	// now point head to the new guy
	if (pHead != NULL)
		pHead->pPrev = pNew;
	else
		pTail = pNew; // there is no head so there is no tail!

	// finally, this is the new head
	pHead = pNew;
	numItems++;
}

	catch (...)
	{
		throw "ERROR: unable to allocate a new node for a list";
	}
}

/*********************************************
* LIST :: FRONT
* retrieves the first element in the list
* INPUT :
* OUTPUT : data to be displayed
* COST : O(1)
*********************************************/

template <class T>
T & List <T> :: front() const throw (const char *)
{
	if (pHead != NULL)
		return pHead->data;
	else
		throw "ERROR: unable to access data from an empty list";
}

/*********************************************
* LIST :: BACK
* retrieves the last element in the list
* INPUT :
* OUTPUT : data to be displayed
* COST : O(1)
*********************************************/

template <class T>
T & List <T> :: back() throw (const char *)
{
	if (pHead != NULL)
		return pTail->data;
	else
		throw "ERROR: unable to access data from an empty list";
}

/******************************************
* LIST :: REMOVE
* remove an item from the middle of the list
* INPUT : an iterator to the item being removed
* OUTPUT : iterator to the new location
* COST : O(1)
******************************************/

template <class T>
ListIterator <T> List <T> :: remove(ListIterator <T> & it) throw (const char *)
{
	ListIterator <T> itNext = end();

	// invalid iterator case
	if (it == end())
		throw "ERROR: unable to remove from an invalid location in a list";
	
	assert(pHead && pTail);

	// fixup everything after the current location
	if (it.p->pNext) // not the last element
	{
		it.p->pNext->pPrev = it.p->pPrev;
		itNext = it.p->pNext;
	}

	else // are the last element
		pTail = pTail->pPrev;

	// fixup everything before the current location
	if (it.p->pPrev) // not the first element
		it.p->pPrev->pNext = it.p->pNext;
	else
		pHead = pHead->pNext;

	// delete self and return
	delete it.p;
	numItems--;
	return itNext;
}

/******************************************
* LIST :: INSERT
* add an item to the middle of the list
* INPUT : data to be added to the list
* an iterator to the location where it is to be inserted
* OUTPUT : iterator to the new item
* COST : O(1)
******************************************/

template <class T>
ListIterator <T> List <T> :: insert(ListIterator <T> & it, const T & data) throw (const char *)
{

	// empty list case
	if (pHead == NULL)
	{
		assert(pTail == NULL);
		pHead = pTail = new Node <T> (data);
		return begin();
	}

	// make sure pHead and pTail are correctly set
	assert(pTail && pHead);
	assert(pHead->pPrev == NULL);
	assert(pTail->pNext == NULL);
	
	try
	{

		Node <T> * pNew = new Node <T> (data);
		
		// end of list case
		if (it == end())
		{

		// update pTail as appropriate
		pTail->pNext = pNew;
		pNew->pPrev = pTail;
		pTail = pNew;

		// update the iterator
		it = pNew;
		}

		// otherwise we have a valid iterator
		else
		{
		
			// set pNext and pPrev
			pNew->pPrev = it.p->pPrev;
			pNew->pNext = it.p;
			
			// update who pNext and pPrev point to
			if (pNew->pPrev)
				pNew->pPrev->pNext = pNew;
			else
				pHead = pNew;

			if (pNew->pNext)
				pNew->pNext->pPrev = pNew;
			else
				pTail = pNew;
			it = pNew;
		}
			
		numItems++;
	}

	catch (...)
	{
		throw "ERROR: unable to allocate a new node for a list";
	}

	return it;
}

#endif // LIST_Hfibonacci.cpp0000600003530400007650000001160712725170352013320 0ustar  cs235s3g5student/***********************************************************************
 * Implementation:
 *    FIBONACCI
 * Summary:
 *    This will contain the implementation for fibonacci() as well as any
 *    other function or class implementations you may need
 * Author
 *    Tiffany Gohnert, John Vehikite
 **********************************************************************/

#include <iostream>
#include "fibonacci.h"   // for fibonacci() prototype
#include "list.h"        // for LIST
#include <list>
using namespace std;


class Big
{
   private:
   //problem? 
      List<int> chunks;
       int chunkSize;
	  
	  
      
	   
   public:
     
   //default constructor sets chuckSize
	  Big() : chunkSize(1000000000) {}
      
	 // non-default constructor taking an unsigned int as a parameter
	 Big(unsigned int data)
{
//reset chuckSize
   chunkSize = 1000000000;
   
   
   //problem here
   //inset data into list
    ListIterator <int> it;
   
               it = chunks.begin();
               while (chunkSize-- > 0)
                  ++it;
              
      
  chunks.insert(it,data);
   
   
  
}
     

//copy constructor
	Big(const Big & rightSide)
{
   chunkSize = rightSide.chunkSize;
   //with or without the List<int>?
   chunks = List<int>(rightSide.chunks);
}
	  
  //operators
      Big & operator = (Big rightSide){
   chunks = rightSide.chunks;
   chunkSize = rightSide.chunkSize;
   return (*this);
}
      Big operator +=(const Big & rightSide)
	  {
	  
	 Big returned;
   int extra = 0;

   for(int i = 0;
      i < chunks.size() && i < rightSide.chunks.size(); i++)
   {
   
   chunks.front() = i;
   rightSide.chunks.front()=i; 
     int num = chunks.front() + rightSide.chunks.front();

	  ListIterator <int> it;
   
               //it = (num % chunkSize) + extra;
	   
               it = chunks.begin();
               while (chunkSize-- > 0)
                  ++it;
      returned.chunks.insert(it,
         returned.chunks.size());
      //extra = num / chunkSize;
	  extra = num ;
   }

   if (extra != 0)
   {
   
   ListIterator <int> it;
   
               it = chunks.begin();
               while (chunkSize-- > 0)
                  ++it;
   
     // returned.chunks.insert(extra, returned.chunks.size());
	 
	 returned.chunks.insert(it, returned.chunks.size());
   }

   if(chunks.size() > rightSide.chunks.size())
   {
      for(int i = rightSide.chunks.size();
         i < chunks.size(); i+=1)
      {
	  chunks.front()=i;
	  
	  ListIterator <int> it;
   
               it = chunks.begin();
               while (chunkSize-- > 0)
                  ++it;
	  returned.chunks.insert(it,
            returned.chunks.size());
         
		 
		 //returned.chunks.insert(chunks.front(),
           // returned.chunks.size());
      }
   }
   else if(chunks.size() < rightSide.chunks.size())
   {
      for(int i = chunks.size();
            i < rightSide.chunks.size(); i+=1)
      {
	  
	  rightSide.chunks.front()=i;
	  
	  ListIterator <int> it;
   
               it = chunks.begin();
               while (chunkSize-- > 0)
                  ++it;
				  
				   returned.chunks.insert(it,
          returned.chunks.size());
	  
      //   returned.chunks.insert(rightSide.chunks.front(),
        //    returned.chunks.size());
      }
   }

   return returned;
	  
	  }
      
	  
	  friend ostream & operator << (ostream & out, const Big & big)
	  {
	  
	   for(int i = big.chunks.size() - 1;
      i >= 0; i -= 1)
   {
   big.chunks.front()=i;
      out << big.chunks.front() ;
   }
   return out;}
};


Big fib(int index)
{
   Big first = 0;
   Big second = 1;
   Big next = 0;  

for ( int c = 1 ; c < index ; c++ )
   {
      if ( c <= 1 )
         next = c;
      else
      {
         next = first += second;
         first = second;
         second = next;
		 
		
 
      }
      return next;
   }
 





}



/************************************************
 * FIBONACCI
 * The interactive function allowing the user to
 * display Fibonacci numbers
 ***********************************************/

 
 void fibonacci()
{
   // show the first several Fibonacci numbers
   int number;
   cout << "How many Fibonacci numbers would you like to see? ";
   cin  >> number;

   // your code to display the first <number> Fibonacci numbers

   
   
   int c, first = 0, second = 1, next;   
   
for ( c = 1 ; c < number+1 ; c++ )
   {
      if ( c <= 1 )
         next = c;
      else
      {
         next = first + second;
         first = second;
         second = next;
      }
  cout << "\t" <<next << endl;   
   }
   
  
   

   // prompt for a single large Fibonacci
   cout << "Which Fibonacci number would you like to display? ";
   cin  >> number;

   // your code to display the <number>th Fibonacci number
   
   //get number ex 100=354224848179261915075
   
cout << fib(number) << endl;
   
   
   

   
   
   //insert into list
   //separate with << operator by 3X7 & remove
   //output list
   
   cout << number << endl; 
   
   
}


week07.cpp0000600003530400007650000002522412725167675012523 0ustar  cs235s3g5student/***********************************************************************
* Program:
*    Week 07, LIST
*    Brother Helfrich, CS 235
* Author:
*    Br. Helfrich
* Summary: 
*    This is a driver program to exercise the List class.  When you
*    submit your program, this should not be changed in any way.  That being
*    said, you may need to modify this once or twice to get it to work.
************************************************************************/

#include <iostream>     // for CIN and COUT
#include <iomanip>      // for SETW
#include <string>       // for the String class
#include <cassert>      // for ASSERT
#include "list.h"       // your List class should be in list.h
#include "fibonacci.h"  // your fibonacci() function
using namespace std;


// prototypes for our four test functions
void testSimple();
void testPush();
void testIterate();
void testInsertRemove();

// To get your program to compile, you might need to comment out a few
// of these. The idea is to help you avoid too many compile errors at once.
// I suggest first commenting out all of these tests, then try to use only
// TEST1.  Then, when TEST1 works, try TEST2 and so on.
#define TEST1   // for testSimple()
#define TEST2   // for testPush()
#define TEST3   // for testIterate()
#define TEST4   // for testInsertRemove()

/**********************************************************************
 * MAIN
 * This is just a simple menu to launch a collection of tests
 ***********************************************************************/
int main()
{
   // menu
   cout << "Select the test you want to run:\n";
   cout << "\t1. Just create and destroy a List\n";
   cout << "\t2. The above plus push items onto the List\n";
   cout << "\t3. The above plus iterate through the List\n";
   cout << "\t4. The above plus insert and remove items from the list\n";
   cout << "\ta. Fibonacci\n";

   // select
   char choice;
   cout << "> ";
   cin  >> choice;
   switch (choice)
   {
      case 'a':
         fibonacci();
         break;
      case '1':
         testSimple();
         cout << "Test 1 complete\n";
         break;
      case '2':
         testPush();
         cout << "Test 2 complete\n";
         break;
      case '3':
         testIterate();
         cout << "Test 3 complete\n";
         break;
      case '4':
         testInsertRemove();
         cout << "Test 4 complete\n";
         break;
      default:
         cout << "Unrecognized command, exiting...\n";
   }

   return 0;
}

/*******************************************
 * TEST SIMPLE
 * Very simple test for a List: create and destroy
 ******************************************/
void testSimple()
{
#ifdef TEST1
   try
   {
      cout.setf(ios::fixed | ios::showpoint);
      cout.precision(5);
   
      // Test 1.a: a bool List with default constructor
      cout << "Create a bool List using the default constructor\n";
      List <bool> l1;
      cout << "\tSize:  " << l1.size()                   << endl;
      cout << "\tEmpty? " << (l1.empty() ? "Yes" : "No") << endl;

      // Test 1.b: double List and add one element
      cout << "Create a double List and add one element: 3.14159\n";
      List <double> l2;
      l2.push_back(3.14159); 
      cout << "\tSize:  " << l2.size()                   << endl;
      cout << "\tEmpty? " << (l2.empty() ? "Yes" : "No") << endl;
      cout << "\tFront: " << l2.front()                  << endl;
      cout << "\tBack:  " << l2.back()                   << endl;
  
      {
         // Test 1.c: copy the double List
         cout << "Copy the double List using the copy-constructor\n";
         List <double> l3(l2);
         cout << "\tSize:  " << l3.size()                   << endl; 
         cout << "\tEmpty? " << (l3.empty() ? "Yes" : "No") << endl;
         cout << "\tFront: " << l3.front()                  << endl;
         cout << "\tBack:  " << l3.back()                   << endl;
      }

      // test 1.d: Copy the List using the assignment operator
      cout << "Copy a double List using the assignment operator\n";
      List <double> l4;
      l4.push_back(1.0); // this node will get destroyed with the =
      l4 = l2;
      cout << "\tSize:  " << l4.size()                   << endl;
      cout << "\tEmpty? " << (l4.empty() ? "Yes" : "No") << endl;
      cout << "\tFront: " << l4.front()                  << endl;
      cout << "\tBack:  " << l4.back()                   << endl;
   }
   catch (const char * error)
   {
      cout << error << endl;
   }
#endif //TEST1
}

/*******************************************
 * TEST PUSH
 * Add a whole bunch of items to the List.  This will
 * test the push_back() and push_front() algorithm
 *****************************************/
void testPush()
{
#ifdef TEST2
   try
   {
      // create
      List <int> l1;
      int size1 = 0;

      // test push_back
      cout << "Enter integer values to put on the back, type 0 when done\n";
      int value;
      do
      {
         if (l1.empty())
            cout << "\t(   ...   ) > ";
         else
            cout << "\t( "
                 << l1.front()
                 << " ... "
                 << l1.back()
                 << " ) > ";
         cin  >> value;
         if (value)
         {
            l1.push_back(value);
            size1++;
         }
      }
      while (value);

      // test copy
      List <int> l2(l1);
      assert(l1.size() == l2.size());
      cout << "Copied l1 into l2\n";

      // modify the front and back of l1 and l2
      if (!l1.empty())
      {
         assert(l1.back()  == l2.back());
         assert(l1.front() == l2.front());
         l1.back()  =  42;
         l1.front() = -42;
      }
      cout << "Modified l1\n";

      // test empty
      l2.clear();
      int size2 = 0;
      cout << "Copied list l2 is "
           << (l2.empty() ? "empty." : "not empty.") << endl;

      // test push_front
      cout << "Enter integer values to put on the front, type 0 when done\n";
      do
      {
         if (l2.empty())
            cout << "\t(   ...   ) > ";
         else
            cout << "\t( "
                 << l2.front()
                 << " ... "
                 << l2.back()
                 << " ) > ";
         cin  >> value;
         if (value)
         {
            l2.push_front(value);
            size2++;
         }
      }
      while (value);

      // make sure the original list is not changed
      assert(l1.size() == size1);
      assert(l2.size() == size2);
      cout << "Sizes of l1 and l2 are correct\n";

      // make sure that l1 was not changed
      if (!l1.empty())
      {
         assert(l1.back()  ==  42);
         assert(l1.front() == -42);
      }
      cout << "The list l1 was unchanged\n";
   }
   catch (const char * error)
   {
      cout << error << endl;
   }
#endif // TEST2   
}

/*****************************************
 * LIST :: DISPLAY
 * Display the contents of the list forwards
 ****************************************/
template <class T>
ostream & operator << (ostream & out, List <T> & rhs)
{
   out << '{';

#ifdef TEST3
   ListIterator <T> it;
   for (it = rhs.begin(); it != rhs.end(); ++it)
      out << "  " << *it;
#endif // TEST3

   out << "  }";

   return out;   
}

/*******************************************
 * TEST ITERATE
 * We will test the iterators. We will go through the
 * list forwards and backwards
 ******************************************/
void testIterate()
{
#ifdef TEST3
   // create
   cout << "Create a string List with the default constructor\n";
   List <string> l;

   // instructions
   cout << "Instructions:\n"
        << "\t+ dog   pushes dog onto the front\n"
        << "\t- cat   pushes cat onto the back\n"
        << "\t#       displays the contents of the list backwards\n"
        << "\t*       clear the list\n"
        << "\t!       quit\n";

   char command;
   string text;
   do
   {
      cout << l << " > ";
      cin  >> command;

      try
      {
         switch (command)
         {
            case '+':
               cin >> text;
               l.push_front(text);
               break;
            case '-':
               cin >> text;
               l.push_back(text);
               break;
            case '#':
               cout << "\tBackwards: {";
               for (ListIterator <string> it = l.rbegin();
                    it != l.rend();
                    --it)
                  cout << "  " << *it;
               cout << "  }\n";
               break;
            case '*':
               l.clear();
               break;
            case '!':
               // do nothing, we will exit out of the loop
               break;
            default:
               cout << "Unknown command\n";
               cin.ignore(256, '\n');
         }      
      }
      catch (const char * e)
      {
         cout << '\t' << e << endl;
      }
   }
   while (command != '!');
#endif // TEST3
}

/*******************************************
 * TEST INSERT REMOVE
 * We will insert items in a list from the location
 * specified by the iterator, and remove items from
 * the list from the given iterator
 *******************************************/
void testInsertRemove()
{
#ifdef TEST4
   // first, fill the list
   List <char> l;
   for (char letter = 'a'; letter <= 'm'; letter++)
      l.push_back(letter);

   // instructions
   cout << "Instructions:\n"
        << "\t+ 3 A  put 'A' after the 3rd item in the list\n"
        << "\t- 4    remove the fourth item from the list\n"
        << "\t!       quit\n";

   char command;
   do
   {
      ListIterator <char> it;
      int index = 0;
      char letter;
      
      // display the list with indicies in the row above
      cout << ' ';
      for (it = l.begin(); it != l.end(); ++it)
         cout << setw(3) << index++;
      cout << endl;
      cout << l << endl;

      // prompt for the next command
      cout << "> ";
      cin  >> command;

      try
      {
         switch (command)
         {
            case '+':
               cin >> index >> letter;
               it = l.begin();
               while (index-- > 0)
                  ++it;
               l.insert(it, letter);
               break;
            case '-':
               cin >> index;
               it = l.begin();
               while (index-- > 0)
                  ++it;
               l.remove(it);
               break;
            case '!':
               break;
            default:
               cout << "Unknown command\n";
               break;
         }

         // error recovery: unexpected input
         if (cin.fail())
         {
            cin.clear();
            cin.ignore(256, '\n');
         }
         
      }
      // error recovery: thrown exception
      catch (const char * e)
      {
         cout << '\t' << e << endl;
      }
   }
   while (command != '!'); 
#endif // TEST4

}
makefile0000600003530400007650000000235712725170270012400 0ustar  cs235s3g5student###############################################################
# Program:
#     Week 07, LIST
#     Brother JonesL, CS235
# Author:
#     Tiffany Gohnert John Vehikite
# Summary:
#     Create a class similar to the std::list class
# Time:
#     15+ hrs
# Hardest Part:
#     We couldn't figure out how to use our List class to 
#     create large Fibonacci numbers. We also had issues
#     figuring out how to go from our Node class from last
#     week to our List class this week, but our instructor
#     helped us to get through.
###############################################################

##############################################################
# The main rule
##############################################################
a.out: list.h week07.o fibonacci.o
	g++ -o a.out week07.o fibonacci.o
	tar -cf week07.tar *.h *.cpp makefile

##############################################################
# The individual components
#      week07.o       : the driver program
#      fibonacci.o    : the logic for the fibonacci-generating function
#      <anything else?>
##############################################################
week07.o: list.h week07.cpp
	g++ -c week07.cpp

fibonacci.o: fibonacci.h fibonacci.cpp list.h
	g++ -c fibonacci.cpp

